# Generated by Django 5.0.14 on 2025-10-08 02:46

from django.db import migrations


def seed_default_templates(apps, schema_editor):
    """Create default packing list templates for common trip types."""
    PackingListTemplate = apps.get_model('packing', 'PackingListTemplate')
    PackingListTemplateItem = apps.get_model('packing', 'PackingListTemplateItem')

    # Beach Trip Template
    beach_template = PackingListTemplate.objects.create(
        name='Beach Trip',
        description='Essential items for a beach vacation',
        is_system_template=True
    )
    beach_items = [
        # Clothing
        ('Clothing', 'Swimsuit', 2, 'At least 2 for rotation'),
        ('Clothing', 'Beach towels', 2, ''),
        ('Clothing', 'Cover-up or sarong', 1, ''),
        ('Clothing', 'Flip flops / Sandals', 1, ''),
        ('Clothing', 'Sunglasses', 1, ''),
        ('Clothing', 'Sun hat', 1, ''),
        ('Clothing', 'Light sundresses / shorts', 3, ''),
        ('Clothing', 'T-shirts', 3, ''),
        # Sun Protection
        ('Sun Protection', 'Sunscreen (SPF 30+)', 1, 'Reef-safe if needed'),
        ('Sun Protection', 'Aloe vera gel', 1, 'For sunburn relief'),
        ('Sun Protection', 'Lip balm with SPF', 1, ''),
        # Beach Gear
        ('Beach Gear', 'Beach bag', 1, ''),
        ('Beach Gear', 'Beach umbrella', 1, 'Optional'),
        ('Beach Gear', 'Cooler', 1, 'For drinks and snacks'),
        ('Beach Gear', 'Beach toys', 1, 'If traveling with kids'),
        ('Beach Gear', 'Snorkel gear', 1, 'Optional'),
        # Electronics
        ('Electronics', 'Waterproof phone case', 1, ''),
        ('Electronics', 'Waterproof camera', 1, 'Optional'),
        ('Electronics', 'Phone charger', 1, ''),
        # Toiletries
        ('Toiletries', 'Shampoo & Conditioner', 1, ''),
        ('Toiletries', 'Body wash', 1, ''),
        ('Toiletries', 'After-sun lotion', 1, ''),
    ]
    for order, (category, item, qty, notes) in enumerate(beach_items, start=1):
        PackingListTemplateItem.objects.create(
            template=beach_template,
            category=category,
            item_name=item,
            quantity=qty,
            notes=notes,
            order=order
        )

    # Mountain Trip Template
    mountain_template = PackingListTemplate.objects.create(
        name='Mountain Trip',
        description='Essentials for mountain and hiking trips',
        is_system_template=True
    )
    mountain_items = [
        # Clothing
        ('Clothing', 'Hiking boots', 1, 'Broken in'),
        ('Clothing', 'Moisture-wicking shirts', 3, ''),
        ('Clothing', 'Hiking pants', 2, ''),
        ('Clothing', 'Fleece jacket', 1, ''),
        ('Clothing', 'Rain jacket', 1, 'Waterproof'),
        ('Clothing', 'Hat', 1, ''),
        ('Clothing', 'Hiking socks', 4, 'Wool or synthetic'),
        ('Clothing', 'Gloves', 1, 'If cold weather'),
        # Hiking Gear
        ('Hiking Gear', 'Daypack / Backpack', 1, '20-30L recommended'),
        ('Hiking Gear', 'Water bottles / Hydration pack', 2, ''),
        ('Hiking Gear', 'Trail map', 1, ''),
        ('Hiking Gear', 'Compass / GPS device', 1, ''),
        ('Hiking Gear', 'Trekking poles', 1, 'Optional'),
        ('Hiking Gear', 'Headlamp / Flashlight', 1, 'With extra batteries'),
        # Safety
        ('Safety', 'First aid kit', 1, ''),
        ('Safety', 'Whistle', 1, ''),
        ('Safety', 'Emergency blanket', 1, ''),
        ('Safety', 'Multi-tool / Knife', 1, ''),
        ('Safety', 'Fire starter', 1, 'Waterproof matches or lighter'),
        # Sun & Bug Protection
        ('Protection', 'Sunscreen (SPF 30+)', 1, ''),
        ('Protection', 'Bug spray', 1, 'DEET or natural'),
        ('Protection', 'Blister treatment', 1, 'Moleskin or bandages'),
        # Snacks & Nutrition
        ('Food', 'Trail mix', 3, ''),
        ('Food', 'Energy bars', 5, ''),
        ('Food', 'Electrolyte tablets', 1, ''),
    ]
    for order, (category, item, qty, notes) in enumerate(mountain_items, start=1):
        PackingListTemplateItem.objects.create(
            template=mountain_template,
            category=category,
            item_name=item,
            quantity=qty,
            notes=notes,
            order=order
        )

    # Summer Trip Template
    summer_template = PackingListTemplate.objects.create(
        name='Summer Vacation',
        description='General packing list for warm weather trips',
        is_system_template=True
    )
    summer_items = [
        # Clothing
        ('Clothing', 'T-shirts', 5, ''),
        ('Clothing', 'Shorts', 3, ''),
        ('Clothing', 'Light dresses', 2, 'Optional'),
        ('Clothing', 'Sandals', 1, ''),
        ('Clothing', 'Sneakers / Comfortable walking shoes', 1, ''),
        ('Clothing', 'Sunglasses', 1, ''),
        ('Clothing', 'Hat or cap', 1, ''),
        ('Clothing', 'Swimsuit', 1, ''),
        ('Clothing', 'Light jacket / Cardigan', 1, 'For AC'),
        # Accessories
        ('Accessories', 'Day bag / Backpack', 1, ''),
        ('Accessories', 'Water bottle', 1, ''),
        ('Accessories', 'Travel umbrella', 1, 'For rain'),
        # Sun Protection
        ('Sun Protection', 'Sunscreen', 1, ''),
        ('Sun Protection', 'After-sun lotion', 1, ''),
        ('Sun Protection', 'Lip balm with SPF', 1, ''),
        # Toiletries
        ('Toiletries', 'Deodorant', 1, ''),
        ('Toiletries', 'Shampoo', 1, ''),
        ('Toiletries', 'Conditioner', 1, ''),
        ('Toiletries', 'Body wash', 1, ''),
        ('Toiletries', 'Toothbrush & Toothpaste', 1, ''),
        ('Toiletries', 'Razor', 1, ''),
        # Electronics
        ('Electronics', 'Phone charger', 1, ''),
        ('Electronics', 'Camera', 1, 'Optional'),
        ('Electronics', 'Power bank', 1, ''),
    ]
    for order, (category, item, qty, notes) in enumerate(summer_items, start=1):
        PackingListTemplateItem.objects.create(
            template=summer_template,
            category=category,
            item_name=item,
            quantity=qty,
            notes=notes,
            order=order
        )

    # Winter Trip Template
    winter_template = PackingListTemplate.objects.create(
        name='Winter Vacation',
        description='Essential items for cold weather trips',
        is_system_template=True
    )
    winter_items = [
        # Clothing
        ('Clothing', 'Winter coat / Parka', 1, 'Insulated and waterproof'),
        ('Clothing', 'Warm sweaters', 3, ''),
        ('Clothing', 'Long pants / Jeans', 3, ''),
        ('Clothing', 'Thermal underwear', 2, 'Top and bottom'),
        ('Clothing', 'Warm socks', 5, 'Wool or thermal'),
        ('Clothing', 'Winter boots', 1, 'Waterproof'),
        ('Clothing', 'Gloves / Mittens', 1, 'Waterproof'),
        ('Clothing', 'Scarf', 1, ''),
        ('Clothing', 'Winter hat / Beanie', 1, ''),
        ('Clothing', 'Warm pajamas', 1, ''),
        # Winter Accessories
        ('Accessories', 'Hand warmers', 5, 'Disposable'),
        ('Accessories', 'Insulated water bottle', 1, ''),
        ('Accessories', 'Day bag', 1, ''),
        # Skin Care (Winter)
        ('Toiletries', 'Moisturizing lotion', 1, 'For dry skin'),
        ('Toiletries', 'Lip balm', 2, 'Heavy duty'),
        ('Toiletries', 'Hand cream', 1, ''),
        ('Toiletries', 'Shampoo & Conditioner', 1, ''),
        ('Toiletries', 'Body wash', 1, ''),
        ('Toiletries', 'Toothbrush & Toothpaste', 1, ''),
        # Winter Gear (Optional)
        ('Winter Gear', 'Ice scraper', 1, 'If driving'),
        ('Winter Gear', 'Snow brush', 1, 'If driving'),
        ('Winter Gear', 'Tire chains', 1, 'If needed'),
        # Electronics
        ('Electronics', 'Phone charger', 1, ''),
        ('Electronics', 'Camera', 1, 'Optional'),
        ('Electronics', 'Power bank', 1, 'Battery drains faster in cold'),
    ]
    for order, (category, item, qty, notes) in enumerate(winter_items, start=1):
        PackingListTemplateItem.objects.create(
            template=winter_template,
            category=category,
            item_name=item,
            quantity=qty,
            notes=notes,
            order=order
        )


def remove_default_templates(apps, schema_editor):
    """Remove default templates if migration is reversed."""
    PackingListTemplate = apps.get_model('packing', 'PackingListTemplate')
    PackingListTemplate.objects.filter(is_system_template=True).delete()


class Migration(migrations.Migration):

    dependencies = [
        ("packing", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(seed_default_templates, remove_default_templates),
    ]
